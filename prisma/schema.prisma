// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Workflow {
  id String @id @default(cuid())
  userId String
  name String
  description String?

  definition String
  executionPlan String?
  status String

  cron String?
  nextRunAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  lastRunAt DateTime?
  lastRunId String?
  lastRunStatus String?

  executions WorkflowExecution[]

  @@unique([userId, name])
}

model WorkflowExecution {
  id String @id @default(cuid())
  workflowId String
  userId String
  trigger String
  status String
  definition String @default("{}")
  
  createdAt DateTime @default(now())
  startedAt DateTime?
  completedAt DateTime?

  phases ExecutionPhase[]

  workflow Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
}

model ExecutionPhase {
  id String @id @default(cuid())
  userId String
  status String
  number Int
  node String
  name String
  startedAt DateTime?
  completedAt DateTime?
  inputs String?
  outputs String?

  workflowExecutionId String
  execution WorkflowExecution @relation(fields: [workflowExecutionId], references: [id], onDelete: Cascade)

  logs ExecutionLog[]
}

model ExecutionLog {
  id String @id @default(cuid())
  executionPhaseId String

  logLevel String
  message String
  timestamp DateTime @default(now())

  executionPhase ExecutionPhase @relation(fields: [executionPhaseId], references: [id], onDelete: Cascade)
}